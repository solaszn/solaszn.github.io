---
// chatButton.astro
import { Icon } from "astro-icon/components";

const meetButtons = "hover:bg-offwhite dark:hover:bg-neutral-700";
---

<div class="dropdown">
  <button class="dropdown-btn flex items-center gap-2 font-medium bg-neutral-800 dark:bg-white text-white dark:text-black p-2 rounded">
    <div>Let's talk</div>
    <Icon name="chevron-down" class="icon w-4 h-4 transition-any" />
  </button>
  <div class="dropdown-content font-medium bg-neutral-100 dark:bg-neutral-800 border border-black/5 dark:border-white/10">
    <a aria-label="Quick call with Feyisola" href="https://cal.com/solaszn/quick-call?nxtPuser=solaszn" target="_blank" class=`${meetButtons} block p-2`>Brief call (15m)</a>
    <a aria-label="Deep dive call with Feyisola" href="https://cal.com/solaszn/secret?nxtPuser=solaszn" target="_blank" class=`${meetButtons} block p-2`>Deep dive (45m)</a>
  </div>
</div>

<style>
  .dropdown {
    position: relative;
  }

  .dropdown-content {
    position: absolute;
    top: 100%;
    left: 0;
    z-index: 20;
    margin-top: 8px;
    padding: 8px;
    min-width: 160px;

    transform: translateY(-10px);
    opacity: 0;
    visibility: hidden;

    /* Spring-like transition */
    transition:
      transform 0.5s cubic-bezier(0.34, 1.56, 0.64, 1),
      opacity 0.5s cubic-bezier(0.34, 1.56, 0.64, 1),
      visibility 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
  }

  .dropdown-content.show {
    transform: translateY(0);
    opacity: 1;
    visibility: visible;
  }


</style>

<script>
  function initializeDropdowns() {
    const dropdowns = document.querySelectorAll(".dropdown");

    dropdowns.forEach((dropdown) => {
      // Clone the dropdown to remove existing listeners
      const clone = dropdown.cloneNode(true) as HTMLElement;
      dropdown.parentNode?.replaceChild(clone, dropdown);

      const btn = clone.querySelector(".dropdown-btn");
      const btnIcon = clone.querySelector(".icon");
      const content = clone.querySelector(".dropdown-content");

      btn?.addEventListener("click", (e) => {
        e.stopPropagation();
        content?.classList.toggle("show");
        btnIcon?.classList.toggle("rotate-180");
      });

      // Close dropdown when clicking outside
      document.addEventListener("click", (event) => {
        if (!clone.contains(event.target as Node)) {
          content?.classList.remove("show");
          btnIcon?.classList.remove("rotate-180");
        }
      });
    });

    // Clean up old document click listeners
    document.removeEventListener("click", closeDropdowns);
  }

  function closeDropdowns(event: MouseEvent) {
    const dropdowns = document.querySelectorAll(".dropdown-content");
    dropdowns.forEach((dropdown) => {
      if (!dropdown.contains(event.target as Node)) {
        dropdown.classList.remove("show");
        const icon = dropdown.parentElement?.querySelector(".icon");
        icon?.classList.remove("rotate-180");
      }
    });
  }

  // Initialize on first load
  document.addEventListener("DOMContentLoaded", initializeDropdowns);

  // Initialize on subsequent navigation
  document.addEventListener("astro:after-swap", initializeDropdowns);
</script>